<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 加载jdbc配置文件 -->
	<context:property-placeholder location="classpath:*/*.properties" />
	<!-- 数据源，使用dbcp -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.DriverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" /> 
	</bean>

	<!-- 
	创建
	sqlSessinFactory
	需要核心的配置文件、连接池、mapper文件
	
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:com/xiupeilian/car/mapper/*.xml"></property>
	</bean>
	
	<!-- spring容器负责实例化mapper接口(dao)的代理实现类的对象-->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xiupeilian.car.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		
	</bean>
	<!-- spring的注解扫描器  主要扫描@serice @resouce等注解...
	注意事项:spring的ioc容器只能配置扫描service层和dao层和Model层，否则
	该项目的事务管理会不生效.
	
	 -->
	<context:component-scan base-package="com/xiupeilian/car">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>
  
  	<!-- 事务管理器 属性是指对哪一个数据源进行事务管理 --> 
		<!--事务管理的具体逻辑(事务的传播行为)! -->
	<!-- spring通过声明式事务管理器对事务进行统一管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		 <property name="dataSource" ref="dataSource" /> 
    </bean> 
    <!-- 
    为什么后台需要三层架构，controller、service、dao
 如果所有的代码都写到controller当中，这样不利于后续的代码复查
而且如果多个controller用到了一些公共的代码,会造成代码的重复
所以就提取service这一层，叫做业务逻辑处理层(数据的业务处理)
dao这一层叫数据库持久层(通过这一层进行数据库的操作)
    
    
    
    
    
     -->
    <!-- 事务增强的一些配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 事务的传播特性 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- //advice叫做通知，封装的是对要对切面进行什么操作，比如事务控制 //pointcut 切入点，表示什么样的切入点会进行advice处理 
			advisor封装了前两个概念，切入点的具体的某某操作 -->
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.xiupeilian.car.service.impl.*.*(..))" />
	</aop:config>
</beans>
  
  

